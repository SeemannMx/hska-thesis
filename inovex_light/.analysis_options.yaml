# Rules enforced internally at Google
include: .analysis_options.yaml
analyzer:
  strong-mode:
    implicit-casts: false
  errors:
    unused_import: error
    unused_local_variable: error
    dead_code: error
    missing_return: error
    missing_required_param: warning
  exclude:
    - lib/**/*.g.dart
linter:
  rules:
    # Effective Dart + Flutter linter rules which are not common with pedantic rule set
    - avoid_catches_without_on_clauses
    - avoid_catching_errors
    - avoid_classes_with_only_static_members
    - avoid_equals_and_hash_code_on_mutable_classes
    - avoid_function_literals_in_foreach_calls
    - avoid_positional_boolean_parameters
    - avoid_private_typedef_functions
    - avoid_returning_null
    - avoid_returning_this
    - avoid_setters_without_getters
    - avoid_types_on_closure_parameters
    - avoid_web_libraries_in_flutter
    - await_only_futures
    - camel_case_types
    - cancel_subscriptions
    - close_sinks
    - constant_identifier_names
    - control_flow_in_finally
    - directives_ordering
    - empty_statements
    - file_names
    - hash_and_equals
    - implementation_imports
    # - lines_longer_than_80_chars
    - non_constant_identifier_names
    - one_member_abstracts
    - package_api_docs
    - package_names
    - package_prefixed_library_names
    - prefer_function_declarations_over_variables
    - prefer_initializing_formals
    - prefer_interpolation_to_compose_strings
    - prefer_mixin
    - prefer_relative_imports
    # - public_member_api_docs
    - test_types_in_equals
    - throw_in_finally
    - type_annotate_public_apis
    - unnecessary_brace_in_string_interps
    - unnecessary_getters_setters
    - unnecessary_lambdas
    - unnecessary_statements
    - use_setters_to_change_properties
    - use_to_and_as_if_applicable
